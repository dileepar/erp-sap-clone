name: 🚀 SAP Clone CI/CD (AWS Free Tier)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  BUN_VERSION: 'latest'

jobs:
  # 🧪 Backend Tests & Build
  backend-ci:
    name: 🔧 Backend (.NET 9) CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: sapclone_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore Dependencies
      run: dotnet restore SAP-Clone.sln

    - name: 🔍 Build Solution
      run: dotnet build SAP-Clone.sln --no-restore --configuration Release

    - name: 🧪 Run Unit Tests
      run: dotnet test SAP-Clone.sln --no-build --configuration Release --verbosity normal

    - name: 📦 Publish API
      run: dotnet publish src/API/SAP.API/SAP.API.csproj --configuration Release --output ./api-publish

    - name: 📤 Upload API Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: ./api-publish

  # 🎨 Frontend Tests & Build  
  frontend-ci:
    name: 🎨 Frontend (React 19 + Bun) CI
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}

    - name: 📦 Install Dependencies
      working-directory: ./src/Web/sap-web
      run: bun install --frozen-lockfile

    - name: 🔍 Lint Code
      working-directory: ./src/Web/sap-web
      run: bun run lint

    - name: 🏗️ Build Frontend
      working-directory: ./src/Web/sap-web
      run: bun run build

    - name: 📤 Upload Frontend Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./src/Web/sap-web/dist

  # 🚀 Deploy to AWS Free Tier (EC2)
  deploy-free-tier:
    name: 🚀 Deploy to AWS Free Tier
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📥 Download API Artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-build
        path: ./api-publish

    - name: 📥 Download Frontend Artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./frontend-dist

    - name: 🔑 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🗂️ Upload to S3 (Static Frontend)
      run: |
        aws s3 sync ./frontend-dist s3://${{ secrets.S3_BUCKET_NAME }} --delete
        aws s3 cp ./frontend-dist/index.html s3://${{ secrets.S3_BUCKET_NAME }}/index.html --cache-control "no-cache"

    - name: 🔄 Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

    - name: 🚀 Deploy API to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Stop existing services
          sudo systemctl stop sap-api || true
          sudo systemctl stop postgresql || true
          
          # Backup current deployment
          sudo cp -r /opt/sap-api /opt/sap-api-backup-$(date +%Y%m%d-%H%M%S) || true
          
          # Create directories
          sudo mkdir -p /opt/sap-api
          sudo chown $USER:$USER /opt/sap-api
          
          # Download and extract new deployment
          cd /tmp
          wget https://github.com/${{ github.repository }}/releases/download/latest/api-build.tar.gz
          tar -xzf api-build.tar.gz
          cp -r api-publish/* /opt/sap-api/
          
          # Set permissions
          chmod +x /opt/sap-api/SAP.API
          
          # Start PostgreSQL
          sudo systemctl start postgresql
          sudo systemctl enable postgresql
          
          # Start API service
          sudo systemctl start sap-api
          sudo systemctl enable sap-api
          
          # Health check
          sleep 10
          curl -f http://localhost:5000/health || exit 1

    - name: 📦 Create Release
      run: |
        # Create release package
        tar -czf api-build.tar.gz -C . api-publish
        
        # Upload to GitHub releases
        gh release create "deploy-$(date +%Y%m%d-%H%M%S)" api-build.tar.gz \
          --title "Deployment $(date +%Y-%m-%d)" \
          --notes "Automated deployment from commit ${{ github.sha }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 🧪 Post-Deploy Health Check
      run: |
        echo "🎉 Deployment completed!"
        echo "Frontend: https://${{ secrets.CLOUDFRONT_DOMAIN }}"
        echo "API: http://${{ secrets.EC2_HOST }}:5000"
        
        # Test endpoints
        curl -f https://${{ secrets.CLOUDFRONT_DOMAIN }}/health || echo "Frontend health check failed"
        curl -f http://${{ secrets.EC2_HOST }}:5000/health || echo "API health check failed" 