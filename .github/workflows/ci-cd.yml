p[[[[[[[[[[[[[[[[]]]]]]]]]]]]]: 🚀 SAP Clone CI/CD (AWS Free Tier)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  BUN_VERSION: 'latest'
  AWS_REGION: 'us-east-1'
  
# Enhanced security with OIDC
permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  # 🧪 Backend Tests & Build
  backend-ci:
    name: 🔧 Backend (.NET 9) CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: sapclone_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore Dependencies
      run: dotnet restore SAP-Clone.sln

    - name: 🔍 Build Solution
      run: dotnet build SAP-Clone.sln --no-restore --configuration Release

    - name: 🧪 Run Unit Tests
      run: dotnet test SAP-Clone.sln --no-build --configuration Release --verbosity normal

    - name: 📦 Publish API
      run: dotnet publish src/API/SAP.API/SAP.API.csproj --configuration Release --output ./api-publish

    - name: 📤 Upload API Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: ./api-publish

  # 🎨 Frontend Tests & Build  
  frontend-ci:
    name: 🎨 Frontend (React 19 + Bun) CI
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ env.BUN_VERSION }}

    - name: 📦 Install Dependencies
      working-directory: ./src/Web/sap-web
      run: bun install --frozen-lockfile

    - name: 🏗️ Build Frontend
      working-directory: ./src/Web/sap-web
      run: bun run build

    - name: 📤 Upload Frontend Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./src/Web/sap-web/dist

  # 🏗️ Infrastructure Validation
  infrastructure-check:
    name: 🏗️ Infrastructure Validation
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📦 Install AWS CDK
      run: npm install -g aws-cdk

    - name: 🔑 Configure AWS Credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🔍 CDK Diff (Infrastructure Changes)
      working-directory: ./infrastructure
      run: |
        npm install
        cdk diff
      continue-on-error: true

  # 🚀 Deploy to AWS Free Tier (EC2)
  deploy-free-tier:
    name: 🚀 Deploy to AWS Free Tier
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, infrastructure-check]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📥 Download API Artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-build
        path: ./api-publish

    - name: 📥 Download Frontend Artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./frontend-dist

    - name: 🔑 Configure AWS Credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🗂️ Deploy Frontend to S3
      run: |
        # Get bucket name from AWS (dynamic discovery)
        BUCKET_NAME=$(aws s3api list-buckets --query 'Buckets[?contains(Name, `sap-clone-frontend`)].Name' --output text)
        echo "Deploying to bucket: $BUCKET_NAME"
        
        aws s3 sync ./frontend-dist s3://$BUCKET_NAME --delete
        aws s3 cp ./frontend-dist/index.html s3://$BUCKET_NAME/index.html --cache-control "no-cache"

    - name: 🔄 Invalidate CloudFront
      run: |
        # Get CloudFront distribution ID dynamically
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query 'DistributionList.Items[?contains(Comment, `sap-clone`)].Id' --output text)
        if [ ! -z "$DISTRIBUTION_ID" ]; then
          echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        else
          echo "No CloudFront distribution found"
        fi

    - name: 🚀 Deploy API to EC2
      run: |
        # Get EC2 instance information dynamically
        INSTANCE_INFO=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=sap-clone-api" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].[InstanceId,PublicIpAddress]' \
          --output text)
        
        INSTANCE_ID=$(echo $INSTANCE_INFO | cut -f1)
        PUBLIC_IP=$(echo $INSTANCE_INFO | cut -f2)
        
        echo "Deploying to EC2 instance: $INSTANCE_ID ($PUBLIC_IP)"
        
        # Use AWS Systems Manager for secure deployment (no SSH keys needed)
        aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "sudo systemctl stop sap-api || true",
            "sudo mkdir -p /opt/sap-api",
            "cd /tmp",
            "aws s3 cp s3://sap-clone-deployments/api-build.tar.gz .",
            "tar -xzf api-build.tar.gz",
            "sudo cp -r api-publish/* /opt/sap-api/",
            "sudo chmod +x /opt/sap-api/SAP.API",
            "sudo systemctl start sap-api",
            "sudo systemctl enable sap-api"
          ]'

    - name: 📦 Upload Deployment Package
      run: |
        # Create and upload deployment package to S3
        tar -czf api-build.tar.gz -C . api-publish
        aws s3 cp api-build.tar.gz s3://sap-clone-deployments/api-build.tar.gz

    - name: 📊 Deployment Health Check
      run: |
        # Wait for deployment and check health
        sleep 30
        
        # Get instance public IP for health check
        PUBLIC_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=sap-clone-api" "Name=instance-state-name,Values=running" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        
        echo "🎉 Deployment completed!"
        echo "Frontend: https://$(aws cloudfront list-distributions --query 'DistributionList.Items[?contains(Comment, `sap-clone`)].DomainName' --output text)"
        echo "API: http://$PUBLIC_IP:5000"
        
        # Health checks
        curl -f "http://$PUBLIC_IP:5000/health" || echo "⚠️  API health check failed"
        
    - name: 📊 Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Frontend deployed to S3 + CloudFront" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ API deployed to EC2 via SSM" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Infrastructure validated with CDK" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Secure OIDC authentication used" >> $GITHUB_STEP_SUMMARY 