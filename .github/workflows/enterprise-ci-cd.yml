name: 🚀 Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==================================================
  # 🔍 CODE QUALITY & SECURITY ANALYSIS
  # ==================================================
  code-analysis:
    name: 🔍 Code Quality & Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/Web/sap-web/package-lock.json

    # .NET Code Analysis
    - name: 🔍 .NET Code Analysis (CodeQL)
      uses: github/codeql-action/init@v3
      with:
        languages: csharp

    - name: 📦 Restore .NET Dependencies
      run: dotnet restore

    - name: 🏗️ Build .NET Solution
      run: dotnet build --no-restore --configuration Release

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    # Dependency Vulnerability Scanning
    - name: 🛡️ Run Snyk Security Scan (.NET)
      uses: snyk/actions/dotnet@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

    - name: 🛡️ Run Snyk Security Scan (Node.js)
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

    # SonarQube Analysis
    - name: 🔍 SonarQube Scan
      uses: sonarqube-quality-gate-action@master
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # OWASP Dependency Check
    - name: 🛡️ OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      continue-on-error: true
      with:
        project: 'SAP-Clone'
        path: '.'
        format: 'ALL'

    - name: 📊 Upload OWASP Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-reports
        path: reports/

  # ==================================================
  # 🧪 BACKEND TESTING (.NET API)
  # ==================================================
  backend-tests:
    name: 🧪 Backend Tests (.NET)
    runs-on: ubuntu-latest
    needs: code-analysis
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: sapclone_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore Dependencies
      run: dotnet restore

    - name: 🏗️ Build Solution
      run: dotnet build --no-restore --configuration Release

    - name: 🧪 Run Unit Tests
      run: |
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger trx

    - name: 📊 Generate Coverage Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.10
      with:
        reports: 'coverage/**/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'Html;Cobertura;JsonSummary'

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coveragereport/Cobertura.xml
        flags: backend

    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          TestResults/
          coveragereport/

  # ==================================================
  # 🎨 FRONTEND TESTING (React)
  # ==================================================
  frontend-tests:
    name: 🎨 Frontend Tests (React)
    runs-on: ubuntu-latest
    needs: code-analysis

    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/Web/sap-web/package-lock.json

    - name: 📦 Install Dependencies
      working-directory: src/Web/sap-web
      run: npm ci

    - name: 🔍 ESLint Code Analysis
      working-directory: src/Web/sap-web
      run: npm run lint

    - name: 🎨 Type Check
      working-directory: src/Web/sap-web
      run: npm run type-check

    - name: 🧪 Run Unit Tests
      working-directory: src/Web/sap-web
      run: npm run test:coverage

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./src/Web/sap-web/coverage/lcov.info
        flags: frontend

    - name: 🏗️ Build Production
      working-directory: src/Web/sap-web
      run: npm run build

    - name: 📊 Bundle Analysis
      working-directory: src/Web/sap-web
      run: npm run analyze

    - name: 📊 Upload Frontend Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: src/Web/sap-web/dist/

  # ==================================================
  # 🔚 END-TO-END TESTING
  # ==================================================
  e2e-tests:
    name: 🔚 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: sapclone_e2e
          POSTGRES_USER: e2euser
          POSTGRES_PASSWORD: e2epass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🚀 Start Backend API
      run: |
        dotnet restore
        dotnet build --configuration Release
        cd src/API/SAP.API
        dotnet run --configuration Release &
        sleep 30  # Wait for API to start

    - name: 🎨 Start Frontend
      working-directory: src/Web/sap-web
      run: |
        npm ci
        npm run build
        npm run preview &
        sleep 10  # Wait for frontend to start

    - name: 🧪 Install Playwright
      working-directory: src/Web/sap-web
      run: npx playwright install

    - name: 🔚 Run E2E Tests
      working-directory: src/Web/sap-web
      run: npx playwright test

    - name: 📊 Upload E2E Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          src/Web/sap-web/test-results/
          src/Web/sap-web/playwright-report/

  # ==================================================
  # 🚀 PERFORMANCE TESTING
  # ==================================================
  performance-tests:
    name: 🚀 Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Load Testing with Artillery
    - name: 🚀 API Load Testing
      run: |
        npm install -g artillery
        artillery quick --count 100 --num 10 http://localhost:5083/health

    # Lighthouse Performance Audit
    - name: 🔍 Lighthouse Performance Audit
      uses: treosh/lighthouse-ci-action@v12
      with:
        configPath: './lighthouse.json'
        uploadArtifacts: true

  # ==================================================
  # 🐳 DOCKER BUILD & PUSH
  # ==================================================
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and Push API Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.tags }}-api
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./src/Web/sap-web
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ==================================================
  # 🌐 DEPLOY TO AWS
  # ==================================================
  deploy-aws:
    name: 🌐 Deploy to AWS
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: http://sap-clone-frontend-20250625.s3-website.ap-south-1.amazonaws.com

    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: 📥 Download Frontend Build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./dist

    - name: 🚀 Deploy to S3
      run: |
        aws s3 sync ./dist s3://sap-clone-frontend-20250625 --delete
        
    - name: 🔄 Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*" || echo "CloudFront not configured"

    - name: 📊 Deployment Summary
      run: |
        echo "✅ Frontend deployed to: http://sap-clone-frontend-20250625.s3-website.ap-south-1.amazonaws.com"
        echo "✅ API ready for EC2 deployment"
        echo "✅ All quality gates passed"

  # ==================================================
  # 🔔 NOTIFICATIONS
  # ==================================================
  notify:
    name: 🔔 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-aws]
    if: always()
    
    steps:
    - name: 🔔 Slack Notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow 